class Dictionary:

    def __init__(self):
        self._keys = [None] * 8
        self._values = [None] * 8
        self._size = 0

    def __hash(self, item):
        return (hash(item) & 0x7fffffff) % len(self._keys)

    def put(self, key, value):
        if self._size >= int(len(self._keys) / 2):
            self.__resize(len(self._keys) * 2)

        item_hash = self.__hash(key)

        while self._keys[item_hash] is not None:
            if self._keys[item_hash] == key:
                self._values[item_hash] = value

                return

            item_hash = (item_hash + 1) % len(self._keys)

        self._keys[item_hash] = key
        self._values[item_hash] = value

        self._size += 1

    def get(self, key):
        if not self.__contains__(key):
            return None

        item_hash = self.__hash(key)

        while self._keys[item_hash] != key:
            item_hash = (item_hash + 1) % len(self._keys)

        return self._values[item_hash]

    def delete(self, key):
        if not self.__contains__(key):
            return

        item_hash = self.__hash(key)

        while self._keys[item_hash] != key:
            item_hash = (item_hash + 1) % len(self._keys)

        self._keys[item_hash] = None
        self._values[item_hash] = None
        self._size -= 1

        item_hash = (item_hash + 1) % len(self._keys)

        while self._keys[item_hash] is not None:
            key_temp = self._keys[item_hash]
            value_temp = self._values[item_hash]

            self._keys[item_hash] = None
            self._values[item_hash] = None
            self._size -= 1

            self.put(key_temp, value_temp)

            item_hash = (item_hash + 1) % len(self._keys)

    def isEmpty(self):
        return self._size == 0

    def getSize(self):
        return self._size

    def keys(self):
        keys = [None] * self._size
        index = 0

        for i in range(len(self._keys)):
            if self._keys[i] is not None:
                keys[index] = self._keys[i]
                index += 1

        return keys.__iter__()

    def values(self):
        values = [None] * self._size
        index = 0

        for i in range(len(self._keys)):
            if self._keys[i] is not None:
                values[index] = self._values[i]
                index += 1

        return values.__iter__()

    def __resize(self, size):
        keys_temp = self._keys
        values_temp = self._values

        self._keys = [None] * size
        self._values = [None] * size

        for i in range(len(keys_temp)):
            if keys_temp[i] is not None:
                self.put(keys_temp[i], values_temp[i])

                self._size -= 1

    def __contains__(self, item):
        item_hash = self.__hash(item)

        while self._keys[item_hash] is not None:
            if self._keys[item_hash] == item:
                return True

            item_hash = (item_hash + 1) % len(self._keys)

        return False
