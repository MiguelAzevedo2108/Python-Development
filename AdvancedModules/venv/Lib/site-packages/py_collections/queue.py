class _Node:

    def __init__(self, item, next):
        self.item = item
        self.next = next


class Queue:

    def __init__(self):
        self._first = None
        self._last = None
        self._size = 0

        self._iter_object = None

    def enqueue(self, item):
        old_last = self._last

        self._last = _Node(item, None)

        if self._first is None:
            self._first = self._last
        else:
            old_last.next = self._last

        self._size += 1

    def dequeue(self):
        item = self._first.item

        self._first = self._first.next
        self._size -= 1

        return item

    def isEmpty(self):
        return self._size == 0

    def getSize(self):
        return self._size

    def __iter__(self):
        self._iter_object = self._first

        return self

    def __next__(self):
        if self._iter_object is not None:
            item = self._iter_object.item
            self._iter_object = self._iter_object.next

            return item
        else:
            raise StopIteration
