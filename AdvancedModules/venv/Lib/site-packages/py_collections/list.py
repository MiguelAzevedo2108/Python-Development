class List:

    def __init__(self):
        self._array = [None] * 8
        self._size = 0

    def __hash(self, item):
        return (hash(item) & 0x7fffffff) % len(self._array)

    def append(self, item):
        if self._size >= int(len(self._array) / 2):
            self.__resize(len(self._array) * 2)

        item_hash = self.__hash(item)

        while self._array[item_hash] is not None:
            item_hash = (item_hash + 1) % len(self._array)

        self._array[item_hash] = item
        self._size += 1

    def remove(self, item):
        if not self.__contains__(item):
            return

        if self._size <= int(len(self._array) / 4):
            self.__resize(int(len(self._array) / 2))

        item_hash = self.__hash(item)

        while self._array[item_hash] != item:
            item_hash = (item_hash + 1) % len(self._array)

        self._array[item_hash] = None
        self._size -= 1

        item_hash = (item_hash + 1) % len(self._array)

        while self._array[item_hash] is not None:
            temp = self._array[item_hash]

            self._array[item_hash] = None
            self._size -= 1

            self.append(temp)

            item_hash = (item_hash + 1) % len(self._array)

    def isEmpty(self):
        return self._size == 0

    def getSize(self):
        return self._size

    def __resize(self, size):
        temp = self._array
        self._array = [None] * size

        for item in temp:
            if item is not None:
                self.append(item)

                self._size -= 1

    def __contains__(self, item):
        item_hash = self.__hash(item)

        while self._array[item_hash] is not None:
            if self._array[item_hash] == item:
                return True

            item_hash = (item_hash + 1) % len(self._array)

        return False

    def __iter__(self):
        iter_object = [None] * self._size
        index = 0

        for item in self._array:
            if item is not None:
                iter_object[index] = item
                index += 1

        return iter_object.__iter__()
